{"version":3,"sources":["SearchBar.js","Nominations.js","SearchResults.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","input","setInput","Container","className","FormGroup","Row","Col","sm","FormControl","size","type","placeholder","onChange","e","target","value","onKeyPress","event","key","getMovies","Button","onClick","Nominations","muted","onDragEnd","result","destination","items","Array","from","nominations","splice","source","index","reorderedItem","updateNominations","droppableId","provided","ListGroup","droppableProps","ref","innerRef","map","id","title","year","draggableId","ListGroupItem","draggableProps","dragHandleProps","auto","xl","variant","handleDeleteNomination","SearchResults","centerstyle","paddingTop","isloading","Spinner","animation","isComplete","console","log","results","poster","Card","style","width","margin","padding","FigureImage","height","alt","src","Body","Title","fontSize","ids","has","xs","md","lg","addNomination","App","showTooManyResultModal","setShowTooManyResultModal","showMovieNotFoundModal","setShowMovieNotFoundModal","isLoading","setIsLoading","setIsComplete","setResults","Set","nominationids","setnominationids","handleTooManyResultClose","handleMovieNotFoundClose","useEffect","length","fluid","fetch","then","response","json","movies","newitems","forEach","Year","imdbID","newitem","Type","Poster","push","span","order","previds","delete","deleteId","prevnominations","add","addId","Modal","show","onHide","ModalBody","ModalFooter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5493e95c.chunk.js","sourcesContent":["import {useState} from 'react'\r\nimport { Container, FormGroup, FormControl, Row, Col, Button } from \"react-bootstrap\";\r\nimport './SearchBar.css'\r\n\r\nfunction SearchBar(props){\r\n\r\n    const [input, setInput] = useState(\"\");\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleKeyPress = (event) => {\r\n        if(event.key === \"Enter\"){\r\n            props.getMovies(input);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Container className=\"searchbar-container\">\r\n            <FormGroup >\r\n                <Row>\r\n                    <Col>\r\n                        <h1>Find movies you love</h1>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <p>Nominate your best movies for the Shoppies Award!</p>\r\n                    </Col>\r\n                </Row>\r\n                <br></br>\r\n                <Row>\r\n                    <Col sm={10}>\r\n                        <FormControl size=\"lg\" type=\"text\" placeholder='\"The Black Panther\"' onChange={handleChange}  onKeyPress={handleKeyPress}/>\r\n                    </Col>\r\n                    <Col sm={2}>\r\n                        <Button className=\"searchbar-button\" type=\"submit\" size=\"lg\" onClick={() => props.getMovies(input)}>Search</Button>\r\n                    </Col>\r\n                </Row>\r\n            </FormGroup>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import {Container, Row, Col, ListGroup, ListGroupItem, Button} from 'react-bootstrap'\r\nimport  React from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport './Nominations.css'\r\n\r\nfunction Nominations(props){\r\n\r\n    const handleOnDragEnd = (result) => {\r\n        if(!result.destination) return;\r\n        const items = Array.from(props.nominations);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        props.updateNominations(items);\r\n    }\r\n\r\n    return(\r\n        <Container className=\"nominations-container\">\r\n            <h3>Nominations</h3>\r\n            <p muted>Sort your nominations by dragging the movies</p>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"nominations\">\r\n                    {(provided) => (\r\n                        <ListGroup {...provided.droppableProps} ref={provided.innerRef} className=\"mt-3\">\r\n                            {props.nominations.map(({id, title, year}, index) => {\r\n                                return(\r\n                                    <Draggable key={id} draggableId={id} index = {index}>\r\n                                        {(provided) => (\r\n                                            <ListGroupItem ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} auto className=\"mt-2 nominations-listgroupitem\">\r\n                                                <Row>\r\n                                                    <Col auto>\r\n                                                        <p>{title} ({year})</p>\r\n                                                    </Col>\r\n                                                    <Col xl={4} >\r\n                                                        <Button size=\"sm\" variant=\"outline-dark\" onClick={() => props.handleDeleteNomination(index, id)}> remove</Button>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroupItem>\r\n                                        )}\r\n                                    </Draggable>\r\n                                )\r\n                            })}\r\n                            {provided.placeholder}\r\n                        </ListGroup>                \r\n                    )}\r\n                </Droppable>\r\n                </DragDropContext>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Nominations;","import {\r\n    Container, Row, Col, Button, ListGroupItem, \r\n    ListGroup, Spinner, Card} from 'react-bootstrap'\r\nimport  React from 'react'\r\nimport './SearchResults.css'\r\nimport FigureImage from 'react-bootstrap/esm/FigureImage'\r\nimport Nominations from './Nominations'\r\n\r\n\r\n/**\r\n * \r\n * OMDb API\r\n * Key:  2c525deb\r\n * Parameters: (http://www.omdbapi.com/)\r\n *  s: to search by name (list out several movies with similar name)\r\n *  y: to search by year\r\n *  callback: JSONP callback function (or use .then())\r\n * \r\n */\r\n\r\nfunction SearchResults(props){\r\n\r\n    const centerstyle = {\r\n        paddingTop: \"8%\"\r\n\r\n    }\r\n\r\n    if(props.isloading){\r\n        return(\r\n            <Container className=\"searchresults-container\">\r\n                <h3 className=\"searchresults-header\">Results</h3>\r\n                <Spinner variant=\"light\" animation=\"border\" />\r\n            </Container>\r\n        )\r\n    } else if(props.isComplete){\r\n        console.log(props.results)\r\n        return(\r\n            <div>\r\n                <Container className=\"searchresults-container\">\r\n                    <h3 className=\"searchresults-header\">Here are your nominees!</h3>\r\n                    <br></br>\r\n                    <Row>\r\n                        {props.nominations.map(({id, title, year, poster}) => {\r\n                            return(\r\n                            <Card style={{width: \"17%\", margin: \"10px\", padding:\"0px\"}} key={id}>\r\n                                <FigureImage \r\n                                                width={101*1.2}\r\n                                                height={150*1.2}\r\n                                                alt=\"image\"\r\n                                                src={poster}\r\n                                                style={{margin:0}}\r\n                                            />\r\n                                <Card.Body>\r\n                                    <Card.Title style={{fontSize:\"0.7em\"}}> {title} ({year})</Card.Title>\r\n                                </Card.Body>\r\n                            </Card>\r\n                            )\r\n                        })}\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    } else {\r\n        return(\r\n            <Container className=\"searchresults-container\">\r\n                <h3 className=\"searchresults-header\">Results</h3>\r\n                \r\n                <ListGroup>\r\n                    {props.results.map(({id, title, year, poster}, index) => {\r\n                        if(!props.ids.has(id)){\r\n                            return (\r\n                                <ListGroupItem auto key={id} className=\"mt-2 searchresults-listitem\">\r\n                                    <Row>\r\n                                        <Col xs xl={2}>\r\n                                            <FigureImage \r\n                                                width={101}\r\n                                                height={150}\r\n                                                alt=\"image\"\r\n                                                src={poster}\r\n                                                style={{margin:0}}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col xs md = {true} lg = {true} style={centerstyle}>\r\n                                            <p>{title} ({year})</p>\r\n                                        </Col>\r\n                                        <Col xs md = {true} lg= {true} style={centerstyle}>\r\n                                            <Button  size=\"sm\" variant=\"outline-success\" onClick={() => {\r\n                                                props.addNomination(id, title, year, poster);\r\n                                            }}> nominate</Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </ListGroupItem>\r\n                            )\r\n                        } else {\r\n                            return(\r\n                                <ListGroupItem auto key={id} className=\"mt-2 searchresults-listitem searchresults-muted\">\r\n                                    <Row>\r\n                                        <Col xs xl={2}>\r\n                                            <FigureImage \r\n                                                width={101}\r\n                                                height={150}\r\n                                                alt=\"image\"\r\n                                                src={poster}\r\n                                                style={{margin:0}}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col xs md = {true} lg = {true} style={centerstyle}>\r\n                                            <p>{title} ({year})</p>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </ListGroupItem>\r\n                            )\r\n                        }\r\n                    })}\r\n                </ListGroup>\r\n            </Container>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default SearchResults;","import './App.css';\r\nimport SearchBar from './SearchBar'\r\nimport SearchResults from './SearchResults'\r\nimport Nominations from './Nominations'\r\n\r\nimport {useEffect, useState} from 'react'\r\n\r\nimport {Container, Row, Col, Modal, ModalBody, ModalFooter, Button} from 'react-bootstrap'\r\n\r\nfunction App(props) {\r\n\r\n  const [showTooManyResultModal, setShowTooManyResultModal] = useState(false);\r\n  const [showMovieNotFoundModal, setShowMovieNotFoundModal] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isComplete, setIsComplete] = useState(false);\r\n  const [results, setResults] = useState([]);\r\n  const [nominations, updateNominations] = useState([]);\r\n  const [nominationids, setnominationids] = useState(new Set());\r\n\r\n  const handleTooManyResultClose = () => setShowTooManyResultModal(false);\r\n  const handleTooManyResultShow = () => setShowTooManyResultModal(true);\r\n  const handleMovieNotFoundClose = () => setShowMovieNotFoundModal(false);\r\n  const handleMovieNotFoundShow = () => setShowMovieNotFoundModal(true);\r\n\r\n  const addId = (id) => {\r\n    setnominationids(previds => {\r\n      previds.add(id);\r\n      return previds;\r\n    })\r\n  }\r\n\r\n  const deleteId = (id) => {\r\n    setnominationids(previds => {\r\n      previds.delete(id);\r\n      return previds;\r\n    })\r\n  }\r\n\r\n  const addNomination = (id, title, year, poster) => {\r\n    const newitem = {id: id, title:title, year: year, poster:poster};\r\n    updateNominations(prevnominations => [...prevnominations, newitem]);\r\n    addId(id);\r\n  }\r\n\r\n  const removeNomination = (index, id) => {\r\n    const items = Array.from(nominations);\r\n    items.splice(index, 1);\r\n    updateNominations(items);\r\n    deleteId(id);\r\n  }\r\n\r\n  useEffect(()=>{\r\n      if(nominations.length === 5){\r\n        setIsComplete(true);\r\n      } else {\r\n        setIsComplete(false);\r\n      }\r\n  }, [nominations])\r\n\r\n  const getOMDbMovies = (title) => {\r\n    setIsLoading(true);\r\n    console.log(\"Getting movies with title: \" + title);\r\n    fetch(\"https://www.omdbapi.com/?apikey=2c525deb&s=\" + title)\r\n    .then(response => response.json())\r\n    .then(movies => {\r\n      if(movies[\"Response\"] === \"True\"){\r\n        let newitems = [];\r\n        movies[\"Search\"].forEach(({Title, Year, imdbID, Type, Poster}) => {\r\n          let newitem = {\r\n            id: imdbID,\r\n            title: Title,\r\n            year: Year,\r\n            poster: Poster\r\n          }\r\n          newitems.push(newitem);\r\n        })\r\n        console.log(newitems);\r\n        setResults(newitems);\r\n        setIsLoading(false);\r\n      } else {\r\n        setIsLoading(false);\r\n        setResults([]);\r\n        if(movies[\"Error\"] === \"Too many results.\"){\r\n          handleTooManyResultShow();\r\n        } else {\r\n          handleMovieNotFoundShow();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Container fluid=\"md\">\r\n        <p className=\"app-trademark\">Made by: Raphael Deonova</p>\r\n        <Row>\r\n          <Col>\r\n            <SearchBar getMovies={getOMDbMovies}></SearchBar>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={{span:4, order:\"last\"}}>\r\n            <Nominations ids={nominationids} nominations={nominations} updateNominations={updateNominations} handleDeleteNomination={removeNomination}></Nominations>\r\n          </Col>\r\n          <Col sm={8}>\r\n            <SearchResults ids={nominationids} nominations={nominations} results={results} addNomination={addNomination} isloading={isLoading} isComplete={isComplete}></SearchResults>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      <Modal show={showTooManyResultModal} onHide={handleTooManyResultClose}>\r\n        <ModalBody>Too Many Result!</ModalBody>\r\n        <ModalFooter>\r\n          <Button variant=\"primary\" onClick={handleTooManyResultClose}>\r\n            Got it\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n      <Modal show={showMovieNotFoundModal} onHide={handleMovieNotFoundClose}>\r\n        <ModalBody>Cannot find movie</ModalBody>\r\n        <ModalFooter>\r\n          <Button variant=\"primary\" onClick={handleMovieNotFoundClose}>\r\n            Got it\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}