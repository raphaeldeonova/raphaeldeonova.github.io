{"version":3,"sources":["logo.svg","SearchBar.js","SearchResults.js","Nominations.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","input","setInput","Container","className","FormGroup","Row","Col","sm","FormControl","size","type","placeholder","onChange","e","target","value","onKeyPress","event","key","getMovies","Button","onClick","SearchResults","isloading","Spinner","animation","ListGroup","results","map","index","id","title","year","ListGroupItem","auto","xl","variant","addNomination","Nominations","nominations","updateNominations","Set","ids","updateIds","handleAddNomination","has","showUniqueIdModal","newitem","prevnominations","previds","add","isUpdateAddNomination","setIsUpdateAddNomination","useEffect","setAddNomination","FormText","muted","onDragEnd","result","destination","items","Array","from","splice","source","reorderedItem","droppableId","provided","droppableProps","ref","innerRef","draggableId","draggableProps","dragHandleProps","console","log","remove","handleDeleteNomination","App","setShowUniqueIdModal","showTooManyResultModal","setShowTooManyResultModal","showMovieNotFoundModal","setShowMovieNotFoundModal","isLoading","setIsLoading","data","setData","handleUniqueIdClose","handleTooManyResultClose","handleMovieNotFoundClose","fluid","fetch","then","response","json","movies","newitems","forEach","Title","Year","imdbID","Type","Poster","push","span","order","Modal","show","onHide","ModalBody","ModalFooter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f06b036.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {useState} from 'react'\r\nimport { Container, FormGroup, FormControl, FormLabel, Row, Col, Button } from \"react-bootstrap\";\r\nimport './SearchBar.css'\r\n\r\nfunction SearchBar(props){\r\n\r\n    const [input, setInput] = useState(\"\");\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleKeyPress = (event) => {\r\n        if(event.key === \"Enter\"){\r\n            props.getMovies(input);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Container className=\"searchbar-container\">\r\n            <FormGroup >\r\n                <Row>\r\n                    <Col>\r\n                        <h2>The Shoppies</h2>\r\n                    </Col>\r\n                </Row>\r\n                <br></br>\r\n                <Row>\r\n                    <Col sm={10}>\r\n                        <FormControl size=\"lg\" type=\"text\" placeholder='\"The Black Panther\"' onChange={handleChange}  onKeyPress={handleKeyPress}/>\r\n                    </Col>\r\n                    <Col sm={2}>\r\n                        <Button type=\"submit\" size=\"lg\" onClick={() => props.getMovies(input)}>Search</Button>\r\n                    </Col>\r\n                </Row>\r\n            </FormGroup>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import {Container, Row, Col, Button, ListGroupItem, ListGroup, Spinner} from 'react-bootstrap'\r\nimport  React, {useState} from 'react'\r\nimport './SearchResults.css'\r\n\r\n\r\n/**\r\n * \r\n * OMDb API\r\n * Key:  2c525deb\r\n * Parameters: (http://www.omdbapi.com/)\r\n *  s: to search by name (list out several movies with similar name)\r\n *  y: to search by year\r\n *  callback: JSONP callback function (or use .then())\r\n * \r\n */\r\n\r\nfunction SearchResults(props){\r\n    // movie is {title, releaseyear}\r\n\r\n\r\n    if(props.isloading){\r\n        return(\r\n            <Container className=\"searchresults-container\">\r\n                <h3>Results</h3>\r\n                <Spinner animation=\"border\"></Spinner>\r\n            </Container>\r\n        )\r\n    } else {\r\n        return(\r\n            <Container className=\"searchresults-container\">\r\n                <h3>Results</h3>\r\n                \r\n                <ListGroup>\r\n                    {props.results.map(({id, title, year}, index) => {\r\n                        return(\r\n                            <ListGroupItem auto key={id} className=\"mt-2\">\r\n                                <Row>\r\n                                    <Col auto>\r\n                                        <p>{title} ({year})</p>\r\n                                    </Col>\r\n                                    <Col xl={3}>\r\n                                        <Button size=\"sm\" variant=\"outline-success\" onClick={() => props.addNomination(id, title, year)}> add</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroupItem>\r\n                        )\r\n                    })}\r\n                </ListGroup>\r\n            </Container>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default SearchResults;","import {Container, Row, Col, ListGroup, ListGroupItem, Button, FormText} from 'react-bootstrap'\r\nimport  React, {useEffect, useState} from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport './Nominations.css'\r\n\r\nfunction Nominations(props){\r\n\r\n    const [nominations, updateNominations] = useState([])\r\n    const [ids, updateIds] = useState(new Set());\r\n    const handleOnDragEnd = (result) => {\r\n        if(!result.destination) return;\r\n        const items = Array.from(nominations);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        updateNominations(items);\r\n    }\r\n\r\n    const handleDeleteNomination = (index, id) => {\r\n        console.log(index);\r\n        const items = Array.from(nominations);\r\n        items.splice(index, 1);\r\n        updateNominations(items);\r\n        updateIds((previds) => {\r\n            previds.remove(id);\r\n            return previds;\r\n        })\r\n    }\r\n\r\n    const handleAddNomination = (id, title, year) => {\r\n        if(ids.has(id)){\r\n            props.showUniqueIdModal();\r\n        } else {\r\n            const newitem = {id: id, title:title, year: year};\r\n            updateNominations(prevnominations => [...prevnominations, newitem]);\r\n            updateIds((previds) => {\r\n                previds.add(id);\r\n                return previds;\r\n            })\r\n        }\r\n    }\r\n\r\n    const [isUpdateAddNomination, setIsUpdateAddNomination] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(!isUpdateAddNomination){\r\n            props.setAddNomination(() => handleAddNomination);\r\n            setIsUpdateAddNomination(true);\r\n        }\r\n    }, [nominations]);\r\n\r\n    return(\r\n        <Container className=\"nominations-container\">\r\n            <h3>Nominations</h3>\r\n            <FormText muted>Sort your nominations by dragging the movies</FormText>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"nominations\">\r\n                    {(provided) => (\r\n                        <ListGroup {...provided.droppableProps} ref={provided.innerRef} className=\"mt-3\">\r\n                            {nominations.map(({id, title, year}, index) => {\r\n                                return(\r\n                                    <Draggable key={id} draggableId={id} index = {index}>\r\n                                        {(provided) => (\r\n                                            <ListGroupItem ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} auto className=\"mt-2 nominations-listgroupitem\">\r\n                                                <Row>\r\n                                                    <Col auto>\r\n                                                        <p>{title} ({year})</p>\r\n                                                    </Col>\r\n                                                    <Col xl={3}>\r\n                                                        <Button size=\"sm\" variant=\"outline-dark\" onClick={() => handleDeleteNomination(index, id)}> delete</Button>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroupItem>\r\n                                        )}\r\n                                    </Draggable>\r\n                                )\r\n                            })}\r\n                            {provided.placeholder}\r\n                        </ListGroup>                \r\n                    )}\r\n                </Droppable>\r\n                </DragDropContext>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Nominations;","import logo from './logo.svg';\nimport './App.css';\nimport SearchBar from './SearchBar'\nimport SearchResults from './SearchResults'\nimport Nominations from './Nominations'\n\nimport {useState} from 'react'\n\nimport {Container, Row, Col, Modal, ModalBody, ModalTitle, ModalFooter, Button} from 'react-bootstrap'\n\nfunction App(props) {\n\n  const [addNomination, setAddNomination] = useState(() => (id, title, year) => console.log(id, title, year, \"in app\"));\n  const [showUniqueIdModal, setShowUniqueIdModal] = useState(false);\n  const [showTooManyResultModal, setShowTooManyResultModal] = useState(false);\n  const [showMovieNotFoundModal, setShowMovieNotFoundModal] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState([]);\n\n  const handleUniqueIdClose = () => setShowUniqueIdModal(false);\n  const handleUniqueIdShow = () => setShowUniqueIdModal(true);\n  const handleTooManyResultClose = () => setShowTooManyResultModal(false);\n  const handleTooManyResultShow = () => setShowTooManyResultModal(true);\n  const handleMovieNotFoundClose = () => setShowMovieNotFoundModal(false);\n  const handleMovieNotFoundShow = () => setShowMovieNotFoundModal(true);\n\n  const getOMDbMovies = (title) => {\n    setIsLoading(true);\n    console.log(\"Getting movies with title: \" + title);\n    fetch(\"http://www.omdbapi.com/?apikey=2c525deb&s=\" + title)\n    .then(response => response.json())\n    .then(movies => {\n      if(movies[\"Response\"] === \"True\"){\n        let newitems = [];\n        movies[\"Search\"].forEach(({Title, Year, imdbID, Type, Poster}) => {\n          let newitem = {\n            id: imdbID,\n            title: Title,\n            year: Year\n          }\n          newitems.push(newitem);\n        })\n        console.log(newitems);\n        setData(newitems);\n        setIsLoading(false);\n      } else {\n        setIsLoading(false);\n        setData([]);\n        if(movies[\"Error\"] === \"Too many results.\"){\n          handleTooManyResultShow();\n        } else {\n          handleMovieNotFoundShow();\n        }\n      }\n    });\n  }\n\n  return (\n    <div>\n      <Container fluid=\"md\">\n        Made by: Raphael Deonova\n        <Row>\n          <Col>\n            <SearchBar getMovies={getOMDbMovies}></SearchBar>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={{span:4, order:\"last\"}}>\n            <Nominations showUniqueIdModal={handleUniqueIdShow} setAddNomination={setAddNomination}></Nominations>\n          </Col>\n          <Col sm={8}>\n            <SearchResults results={data} addNomination={addNomination} isloading={isLoading}></SearchResults>\n          </Col>\n        </Row>\n      </Container>\n      <Modal show={showUniqueIdModal} onHide={handleUniqueIdClose}>\n        <ModalBody>Its cheating to nominate the same movie!</ModalBody>\n        <ModalFooter>\n          <Button variant=\"primary\" onClick={handleUniqueIdClose}>\n            I won't cheat\n          </Button>\n        </ModalFooter>\n      </Modal>\n      <Modal show={showTooManyResultModal} onHide={handleTooManyResultClose}>\n        <ModalBody>Too Many Result!</ModalBody>\n        <ModalFooter>\n          <Button variant=\"primary\" onClick={handleTooManyResultClose}>\n            Got it\n          </Button>\n        </ModalFooter>\n      </Modal>\n      <Modal show={showMovieNotFoundModal} onHide={handleMovieNotFoundClose}>\n        <ModalBody>Cannot find movie</ModalBody>\n        <ModalFooter>\n          <Button variant=\"primary\" onClick={handleMovieNotFoundClose}>\n            Got it\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}