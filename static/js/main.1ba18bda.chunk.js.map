{"version":3,"sources":["logo.svg","SearchBar.js","SearchResults.js","Nominations.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","input","setInput","Container","className","FormGroup","Row","Col","sm","FormControl","size","type","placeholder","onChange","e","target","value","onKeyPress","event","key","getMovies","Button","onClick","SearchResults","isloading","Spinner","animation","isComplete","ListGroup","results","map","index","id","title","year","ListGroupItem","auto","xl","ids","has","variant","addNomination","Nominations","FormText","muted","onDragEnd","result","destination","items","Array","from","nominations","splice","source","reorderedItem","updateNominations","droppableId","provided","droppableProps","ref","innerRef","draggableId","draggableProps","dragHandleProps","handleDeleteNomination","App","showTooManyResultModal","setShowTooManyResultModal","showMovieNotFoundModal","setShowMovieNotFoundModal","isLoading","setIsLoading","setIsComplete","setResults","Set","nominationids","setnominationids","handleTooManyResultClose","handleMovieNotFoundClose","useEffect","length","fluid","console","log","fetch","then","response","json","movies","newitems","forEach","Title","Year","imdbID","newitem","Type","Poster","push","span","order","previds","delete","deleteId","prevnominations","add","addId","Modal","show","onHide","ModalBody","ModalFooter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ba18bda.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {useState} from 'react'\r\nimport { Container, FormGroup, FormControl, FormLabel, Row, Col, Button } from \"react-bootstrap\";\r\nimport './SearchBar.css'\r\n\r\nfunction SearchBar(props){\r\n\r\n    const [input, setInput] = useState(\"\");\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleKeyPress = (event) => {\r\n        if(event.key === \"Enter\"){\r\n            props.getMovies(input);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Container className=\"searchbar-container\">\r\n            <FormGroup >\r\n                <Row>\r\n                    <Col>\r\n                        <h2>The Shoppies</h2>\r\n                    </Col>\r\n                </Row>\r\n                <br></br>\r\n                <Row>\r\n                    <Col sm={10}>\r\n                        <FormControl size=\"lg\" type=\"text\" placeholder='\"The Black Panther\"' onChange={handleChange}  onKeyPress={handleKeyPress}/>\r\n                    </Col>\r\n                    <Col sm={2}>\r\n                        <Button type=\"submit\" size=\"lg\" onClick={() => props.getMovies(input)}>Search</Button>\r\n                    </Col>\r\n                </Row>\r\n            </FormGroup>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import {Container, Row, Col, Button, ListGroupItem, ListGroup, Spinner} from 'react-bootstrap'\r\nimport  React, {useEffect, useState} from 'react'\r\nimport './SearchResults.css'\r\n\r\n\r\n/**\r\n * \r\n * OMDb API\r\n * Key:  2c525deb\r\n * Parameters: (http://www.omdbapi.com/)\r\n *  s: to search by name (list out several movies with similar name)\r\n *  y: to search by year\r\n *  callback: JSONP callback function (or use .then())\r\n * \r\n */\r\n\r\nfunction SearchResults(props){\r\n\r\n    if(props.isloading){\r\n        return(\r\n            <Container className=\"searchresults-container\">\r\n                <h3>Results</h3>\r\n                <Spinner animation=\"border\"></Spinner>\r\n            </Container>\r\n        )\r\n    } else if(props.isComplete){\r\n        return(\r\n            <Container className=\"searchresults-container\">\r\n                <h3>Complete</h3>\r\n            </Container>\r\n        )\r\n    } else {\r\n        return(\r\n            <Container className=\"searchresults-container\">\r\n                <h3>Results</h3>\r\n                \r\n                <ListGroup>\r\n                    {props.results.map(({id, title, year}, index) => {\r\n                        return(\r\n                            <ListGroupItem auto key={id} className=\"mt-2\">\r\n                                <Row>\r\n                                    <Col auto>\r\n                                        <p>{title} ({year})</p>\r\n                                    </Col>\r\n                                    <Col xl={3}>\r\n                                        {!props.ids.has(id) && \r\n                                            <Button size=\"sm\" variant=\"outline-success\" onClick={() => {\r\n                                                props.addNomination(id, title, year);\r\n                                                // update()\r\n                                            }}> nominate</Button>\r\n                                        }\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroupItem>\r\n                        )\r\n                    })}\r\n                </ListGroup>\r\n            </Container>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default SearchResults;","import {Container, Row, Col, ListGroup, ListGroupItem, Button, FormText} from 'react-bootstrap'\r\nimport  React, {useEffect, useState} from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport './Nominations.css'\r\n\r\nfunction Nominations(props){\r\n\r\n    const handleOnDragEnd = (result) => {\r\n        if(!result.destination) return;\r\n        const items = Array.from(props.nominations);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        props.updateNominations(items);\r\n    }\r\n\r\n    return(\r\n        <Container className=\"nominations-container\">\r\n            <h3>Nominations</h3>\r\n            <FormText muted>Sort your nominations by dragging the movies</FormText>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"nominations\">\r\n                    {(provided) => (\r\n                        <ListGroup {...provided.droppableProps} ref={provided.innerRef} className=\"mt-3\">\r\n                            {props.nominations.map(({id, title, year}, index) => {\r\n                                return(\r\n                                    <Draggable key={id} draggableId={id} index = {index}>\r\n                                        {(provided) => (\r\n                                            <ListGroupItem ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} auto className=\"mt-2 nominations-listgroupitem\">\r\n                                                <Row>\r\n                                                    <Col auto>\r\n                                                        <p>{title} ({year})</p>\r\n                                                    </Col>\r\n                                                    <Col xl={3}>\r\n                                                        <Button size=\"sm\" variant=\"outline-dark\" onClick={() => props.handleDeleteNomination(index, id)}> remove</Button>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroupItem>\r\n                                        )}\r\n                                    </Draggable>\r\n                                )\r\n                            })}\r\n                            {provided.placeholder}\r\n                        </ListGroup>                \r\n                    )}\r\n                </Droppable>\r\n                </DragDropContext>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Nominations;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport SearchBar from './SearchBar'\r\nimport SearchResults from './SearchResults'\r\nimport Nominations from './Nominations'\r\n\r\nimport {useEffect, useState} from 'react'\r\n\r\nimport {Container, Row, Col, Modal, ModalBody, ModalTitle, ModalFooter, Button} from 'react-bootstrap'\r\n\r\nfunction App(props) {\r\n\r\n  const [showTooManyResultModal, setShowTooManyResultModal] = useState(false);\r\n  const [showMovieNotFoundModal, setShowMovieNotFoundModal] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isComplete, setIsComplete] = useState(false);\r\n  const [results, setResults] = useState([]);\r\n  const [nominations, updateNominations] = useState([]);\r\n  const [nominationids, setnominationids] = useState(new Set());\r\n\r\n  const handleTooManyResultClose = () => setShowTooManyResultModal(false);\r\n  const handleTooManyResultShow = () => setShowTooManyResultModal(true);\r\n  const handleMovieNotFoundClose = () => setShowMovieNotFoundModal(false);\r\n  const handleMovieNotFoundShow = () => setShowMovieNotFoundModal(true);\r\n\r\n  const addId = (id) => {\r\n    setnominationids(previds => {\r\n      previds.add(id);\r\n      return previds;\r\n    })\r\n  }\r\n\r\n  const deleteId = (id) => {\r\n    setnominationids(previds => {\r\n      previds.delete(id);\r\n      return previds;\r\n    })\r\n  }\r\n\r\n  const addNomination = (id, title, year) => {\r\n    const newitem = {id: id, title:title, year: year};\r\n    updateNominations(prevnominations => [...prevnominations, newitem]);\r\n    addId(id);\r\n  }\r\n\r\n  const removeNomination = (index, id) => {\r\n    const items = Array.from(nominations);\r\n    items.splice(index, 1);\r\n    updateNominations(items);\r\n    deleteId(id);\r\n  }\r\n\r\n  useEffect(()=>{\r\n      if(nominations.length === 5){\r\n        setIsComplete(true);\r\n      } else {\r\n        setIsComplete(false);\r\n      }\r\n  }, [nominations])\r\n\r\n  const getOMDbMovies = (title) => {\r\n    setIsLoading(true);\r\n    console.log(\"Getting movies with title: \" + title);\r\n    fetch(\"https://www.omdbapi.com/?apikey=2c525deb&s=\" + title)\r\n    .then(response => response.json())\r\n    .then(movies => {\r\n      if(movies[\"Response\"] === \"True\"){\r\n        let newitems = [];\r\n        movies[\"Search\"].forEach(({Title, Year, imdbID, Type, Poster}) => {\r\n          let newitem = {\r\n            id: imdbID,\r\n            title: Title,\r\n            year: Year\r\n          }\r\n          newitems.push(newitem);\r\n        })\r\n        console.log(newitems);\r\n        setResults(newitems);\r\n        setIsLoading(false);\r\n      } else {\r\n        setIsLoading(false);\r\n        setResults([]);\r\n        if(movies[\"Error\"] === \"Too many results.\"){\r\n          handleTooManyResultShow();\r\n        } else {\r\n          handleMovieNotFoundShow();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Container fluid=\"md\">\r\n        Made by: Raphael Deonova\r\n        <Row>\r\n          <Col>\r\n            <SearchBar getMovies={getOMDbMovies}></SearchBar>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={{span:4, order:\"last\"}}>\r\n            <Nominations ids={nominationids} nominations={nominations} updateNominations={updateNominations} handleDeleteNomination={removeNomination}></Nominations>\r\n          </Col>\r\n          <Col sm={8}>\r\n            <SearchResults ids={nominationids} results={results} addNomination={addNomination} isloading={isLoading} isComplete={isComplete}></SearchResults>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      <Modal show={showTooManyResultModal} onHide={handleTooManyResultClose}>\r\n        <ModalBody>Too Many Result!</ModalBody>\r\n        <ModalFooter>\r\n          <Button variant=\"primary\" onClick={handleTooManyResultClose}>\r\n            Got it\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n      <Modal show={showMovieNotFoundModal} onHide={handleMovieNotFoundClose}>\r\n        <ModalBody>Cannot find movie</ModalBody>\r\n        <ModalFooter>\r\n          <Button variant=\"primary\" onClick={handleMovieNotFoundClose}>\r\n            Got it\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}